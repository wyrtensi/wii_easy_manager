#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Wii Unified Manager 2.4
======================
–ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º Wii‚Äë—Å—Ç–∏–ª–µ–º, –ø–æ–∏—Å–∫–æ–º –æ–Ω–ª–∞–π–Ω –∏–≥—Ä –∏
–∑–∞–≥—Ä—É–∑–∫–∞–º–∏. –¢—Ä–µ–±—É–µ—Ç:
  ‚Ä¢ wum_style.py          ‚Äî –ø–∞–ª–∏—Ç—Ä–∞ + QSS
  ‚Ä¢ download_queue.py     ‚Äî –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫
  ‚Ä¢ wii_game_parser.py    ‚Äî –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü (–∏–∑ –ø—Ä–µ–∂–Ω–µ–π –≤–µ—Ä—Å–∏–∏)
  ‚Ä¢ wii_game_selenium_downloader.py ‚Äî —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
"""

from __future__ import annotations

import sys
from typing import List, Optional

from PySide6.QtCore import (
    QEasingCurve,
    QPropertyAnimation,
    QRectF,
    Qt,
    Slot,
    QTimer,
    Signal,
)
from PySide6.QtGui import QIcon, QPixmap
from PySide6.QtWidgets import (
    QApplication,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QListWidget,
    QListWidgetItem,
    QMainWindow,
    QProgressBar,
    QPushButton,
    QSizePolicy,
    QSplitter,
    QStackedWidget,
    QStatusBar,
    QVBoxLayout,
    QComboBox,
    QWidget,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Local modules
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from wum_style import build_style, WII_BLUE, WII_GRAY, WII_WHITE, WII_GREEN  # type: ignore
from download_queue_class import DownloadQueue  # type: ignore
from wii_game_parser import WiiGame, WiiGameParser  # type: ignore

###############################################################################
# üé¥ GameCard                                                                #
###############################################################################

class GameCard(QWidget):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± –∏–≥—Ä–µ –∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""

    def __init__(self, queue: DownloadQueue, parent: Optional[QWidget] = None):
        super().__init__(parent)
        self.queue = queue
        # self.setFixedWidth(560) # Removed fixed width

        # ‚îÄ‚îÄ‚îÄ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self._title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É —Å–ª–µ–≤–∞ ‚ú®")
        self._title.setAlignment(Qt.AlignCenter)
        self._title.setWordWrap(True)
        self._title.setStyleSheet(
            f"background:{WII_WHITE};border:2px solid {WII_BLUE};"
            "border-radius:16px;padding:12px;font-size:16pt;font-weight:bold;"
        )

        # ‚îÄ‚îÄ‚îÄ –æ–±–ª–æ–∂–∫–∞
        self._cover = QLabel()
        self._cover.setMinimumSize(200, 200) # Changed from setFixedSize
        self._cover.setAlignment(Qt.AlignCenter)
        self._cover.setStyleSheet(
            f"background:{WII_GRAY};border:2px dashed {WII_BLUE};border-radius:24px;"
        )
        self._cover.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)


        # ‚îÄ‚îÄ‚îÄ –æ–ø–∏—Å–∞–Ω–∏–µ
        self._desc = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å‚Ä¶")
        self._desc.setWordWrap(True)
        self._desc.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self._desc.setStyleSheet(
            f"background:{WII_WHITE};border:2px solid {WII_GRAY};"
            "border-radius:16px;padding:12px;"
        )
        self._desc.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding) # Allow description to expand

        # ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è + –ø—Ä–æ–≥—Ä–µ—Å—Å
        self._btn_dl = QPushButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å")
        self._progress = QProgressBar()
        self._progress.hide()
        
        # ‚îÄ‚îÄ‚îÄ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        self._speed_label = QLabel("")
        self._speed_label.setAlignment(Qt.AlignCenter)
        self._speed_label.setStyleSheet(
            f"background:{WII_WHITE};border:1px solid {WII_GRAY};"
            "border-radius:8px;padding:6px;font-size:12pt;"
        )
        self._speed_label.hide()

        lay = QVBoxLayout(self)
        lay.addWidget(self._title)
        lay.addWidget(self._cover, 0, Qt.AlignCenter) # Stretch factor 0 for cover
        lay.addWidget(self._btn_dl, 0, Qt.AlignCenter) # Stretch factor 0 for button
        lay.addWidget(self._progress, 0) # Stretch factor 0 for progress
        lay.addWidget(self._speed_label, 0) # Stretch factor 0 for speed info
        lay.addWidget(self._desc, 1) # Stretch factor 1 for description to take remaining space

        # Connect signals
        self._btn_dl.clicked.connect(self._do_download)
        queue.download_started.connect(self._on_dl_start)
        queue.download_finished.connect(self._on_dl_finish)
        queue.progress_changed.connect(self._on_progress)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if hasattr(queue, 'speed_updated'):
            queue.speed_updated.connect(self._on_speed_update)

        self._game: Optional[WiiGame] = None

    # ------------------------------------------------------------------
    def _refresh_btn(self):
        if not self._game:
            self._btn_dl.setEnabled(False)
            self._btn_dl.setText("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å")
            return
        status = getattr(self._game, "status", "")
        self._btn_dl.setEnabled(status not in {"queued", "downloading", "downloaded"})
        self._btn_dl.setText({
            "queued": "‚åõ –í –æ—á–µ—Ä–µ–¥–∏",
            "downloading": "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è‚Ä¶",
            "downloaded": "‚úÖ –°–∫–∞—á–∞–Ω–æ",
        }.get(status, "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å"))

    # ------------------------------------------------------------------
    def _do_download(self):
        if self._game:
            self.queue.add(self._game)
            self._refresh_btn()

    # ------------------------------------------------------------------
    @Slot(WiiGame)
    def _on_dl_start(self, g: WiiGame):
        if self._game and g.title == self._game.title:
            self._progress.show()
            self._progress.setValue(0)
            self._speed_label.show()
            self._speed_label.setText("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")
            self._refresh_btn()

    @Slot(WiiGame)
    def _on_dl_finish(self, g: WiiGame):
        if self._game and g.title == self._game.title:
            self._progress.hide()
            self._speed_label.hide()
            self._refresh_btn()

    @Slot(WiiGame, int)
    def _on_progress(self, g: WiiGame, percent: int):
        if self._game and g.title == self._game.title:
            self._progress.setValue(percent)
    
    @Slot(WiiGame, float, str)
    def _on_speed_update(self, g: WiiGame, speed: float, eta: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        if self._game and g.title == self._game.title:
            speed_text = f"‚ö° {speed:.1f} –ú–ë/—Å | ‚è±Ô∏è {eta}"
            self._speed_label.setText(speed_text)

    # ------------------------------------------------------------------
    def update_game(self, game: WiiGame):
        self._game = game
        self._title.setText(game.title)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É
        basic_info = f"–†–µ–≥–∏–æ–Ω: {game.region}\n"
        if hasattr(game, 'rating') and game.rating:
            basic_info += f"–†–µ–π—Ç–∏–Ω–≥: {game.rating}\n"
        if hasattr(game, 'serial') and game.serial:
            basic_info += f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {game.serial}\n"
        if hasattr(game, 'year') and game.year:
            basic_info += f"–ì–æ–¥: {game.year}\n"
        if hasattr(game, 'players') and game.players:
            basic_info += f"–ò–≥—Ä–æ–∫–∏: {game.players}\n"
        if hasattr(game, 'file_size') and game.file_size:
            basic_info += f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {game.file_size}\n"
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
        if hasattr(game, 'graphics') and game.graphics:
            basic_info += f"\n–ì—Ä–∞—Ñ–∏–∫–∞: {game.graphics}\n"
        if hasattr(game, 'sound') and game.sound:
            basic_info += f"–ó–≤—É–∫: {game.sound}\n"
        if hasattr(game, 'gameplay') and game.gameplay:
            basic_info += f"–ì–µ–π–º–ø–ª–µ–π: {game.gameplay}\n"
        if hasattr(game, 'overall') and game.overall:
            basic_info += f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {game.overall}\n"
        if hasattr(game, 'verified') and game.verified:
            basic_info += f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {game.verified}\n"
        
        # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
        if not (hasattr(game, 'graphics') and game.graphics):
            basic_info += "\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
            self._load_detailed_info_async(game)
        
        self._desc.setText(basic_info)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
        if hasattr(game, 'box_art') and game.box_art:
            self._load_cover_image_sync(game.box_art)
        else:
            self._load_cover_image_by_id(game)
        
        self._refresh_btn()

    def _load_detailed_info_async(self, game: WiiGame):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        def load_details():
            try:
                from wii_game_parser import WiiGameParser
                parser = WiiGameParser()
                
                detailed_game = parser.parse_game_details_from_url(game.detail_url)
                if detailed_game:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    for attr in ['serial', 'players', 'year', 'graphics', 'sound', 
                                'gameplay', 'overall', 'crc', 'verified', 'file_size',
                                'download_url', 'box_art', 'disc_art']:
                        if hasattr(detailed_game, attr):
                            setattr(game, attr, getattr(detailed_game, attr))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    QTimer.singleShot(0, lambda: self.update_game(game))
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")
                QTimer.singleShot(0, lambda: self._desc.setText(
                    f"–†–µ–≥–∏–æ–Ω: {game.region}\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
                ))
        
        import threading
        threading.Thread(target=load_details, daemon=True).start()

    def _load_cover_image_sync(self, image_url: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        self._cover.setText("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞...")
        
        def load_image():
            try:
                import requests
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Referer': 'https://vimm.net/',
                    'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
                }
                
                response = requests.get(image_url, headers=headers, timeout=10, verify=False)
                response.raise_for_status()
                
                import tempfile
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
                    tmp.write(response.content)
                    temp_path = tmp.name
                
                QTimer.singleShot(0, lambda: self._set_cover_image(temp_path))
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
                QTimer.singleShot(0, lambda: self._cover.setText("üñºÔ∏è (–æ—à–∏–±–∫–∞)"))
        
        import threading
        threading.Thread(target=load_image, daemon=True).start()

    def _load_cover_image_by_id(self, game: WiiGame):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫—É –ø–æ ID –∏–≥—Ä—ã"""
        import re
        id_match = re.search(r'/vault/(\d+)', game.detail_url)
        if id_match:
            game_id = id_match.group(1)
            # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL –æ–±–ª–æ–∂–∫–∏
            primary_url = f"https://dl.vimm.net/image.php?type=box&id={game_id}"
            self._load_cover_image_sync(primary_url)
        else:
            self._cover.setText("üñºÔ∏è (–Ω–µ—Ç ID)")

    def _set_cover_image(self, image_path: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏"""
        try:
            target_width = self._cover.width() - 10
            if target_width < 50:
                target_width = 200
            
            pix = QPixmap(image_path)
            if not pix.isNull():
                scaled_pix = pix.scaledToWidth(target_width, Qt.SmoothTransformation)
                self._cover.setPixmap(scaled_pix)
            else:
                self._cover.setText("üñºÔ∏è (err)")
                
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                import os
                os.unlink(image_path)
            except Exception:
                pass
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
            self._cover.setText("üñºÔ∏è (err)")

###############################################################################
# üåü Animated navigation button                                               #
###############################################################################

class AnimatedNavButton(QPushButton):
    def __init__(self, text: str):
        super().__init__(text)
        self.setProperty("nav", True)
        self.setCheckable(True)
        self._anim = QPropertyAnimation(self, b"geometry")
        self._anim.setDuration(120)
        self._anim.setEasingCurve(QEasingCurve.InOutQuad)
        self._original_geometry = None
        self._is_scaled = False

    def showEvent(self, e):  # noqa: N802
        super().showEvent(e)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ
        if self._original_geometry is None:
            self._original_geometry = self.geometry()

    def enterEvent(self, e):  # noqa: N802
        if not self.isChecked() and not self._is_scaled:
            self._scale(1.05)
        super().enterEvent(e)

    def leaveEvent(self, e):  # noqa: N802
        if not self.isChecked() and self._is_scaled:
            self._scale(1.0)
        super().leaveEvent(e)

    def _scale(self, k: float):
        if self._original_geometry is None:
            return
            
        self._anim.stop()
        current_rect = self.geometry()
        
        if k == 1.0:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
            target_rect = self._original_geometry
            self._is_scaled = False
        else:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            orig_center = self._original_geometry.center()
            new_width = int(self._original_geometry.width() * k)
            new_height = int(self._original_geometry.height() * k)
            target_rect = QRectF(
                orig_center.x() - new_width/2,
                orig_center.y() - new_height/2,
                new_width,
                new_height
            ).toRect()
            self._is_scaled = True
        
        self._anim.setStartValue(current_rect)
        self._anim.setEndValue(target_rect)
        self._anim.start()

###############################################################################
# ÔøΩ FlashGameCard                                                           #
###############################################################################

class FlashGameCard(QWidget):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä—ã —Å —Ñ–ª–µ—à–∫–∏."""

    def __init__(self, manager_window):
        super().__init__()
        self.manager = manager_window
        self.current_game = None
        
        # ‚îÄ‚îÄ‚îÄ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self._title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É —Å–ª–µ–≤–∞ üíæ")
        self._title.setAlignment(Qt.AlignCenter)
        self._title.setWordWrap(True)
        self._title.setStyleSheet(
            f"background:{WII_WHITE};border:2px solid {WII_BLUE};"
            "border-radius:16px;padding:12px;font-size:16pt;font-weight:bold;"
        )

        # ‚îÄ‚îÄ‚îÄ –æ–±–ª–æ–∂–∫–∞/–∏–∫–æ–Ω–∫–∞
        self._cover = QLabel()
        self._cover.setMinimumSize(200, 200)
        self._cover.setAlignment(Qt.AlignCenter)
        self._cover.setStyleSheet(
            f"background:{WII_GRAY};border:2px dashed {WII_BLUE};border-radius:24px;"
        )
        self._cover.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # ‚îÄ‚îÄ‚îÄ –æ–ø–∏—Å–∞–Ω–∏–µ/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self._info = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å‚Ä¶")
        self._info.setWordWrap(True)
        self._info.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self._info.setStyleSheet(
            f"background:{WII_WHITE};border:2px solid {WII_GRAY};"
            "border-radius:16px;padding:12px;"
        )
        self._info.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        self._btn_remove = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å —Ñ–ª–µ—à–∫–∏")
        self._btn_remove.setEnabled(False)
        
        # ‚îÄ‚îÄ‚îÄ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self._btn_open_folder = QPushButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        self._btn_open_folder.setEnabled(False)

        lay = QVBoxLayout(self)
        lay.addWidget(self._title)
        lay.addWidget(self._cover, 0, Qt.AlignCenter)
        lay.addWidget(self._info, 1)
        
        # –ö–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(self._btn_remove)
        btn_layout.addWidget(self._btn_open_folder)
        lay.addLayout(btn_layout)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self._btn_remove.clicked.connect(self._remove_game)
        self._btn_open_folder.clicked.connect(self._open_folder)

    def update_game(self, game):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ"""
        self.current_game = game
        
        if game is None:
            self._title.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É —Å–ª–µ–≤–∞ üíæ")
            self._cover.setText("üíæ")
            self._info.setText("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å‚Ä¶")
            self._btn_remove.setEnabled(False)
            self._btn_open_folder.setEnabled(False)
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._title.setText(f"üíæ {game.display_title}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = f"üÜî ID: {game.id}\n"
        info_text += f"üìÅ –†–∞–∑–º–µ—Ä: {game.size / (1024**3):.2f} –ì–ë\n"
        
        if hasattr(game, 'dir'):
            info_text += f"üìÇ –ü—É—Ç—å: {game.dir}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ ID
        if len(game.id) >= 4:
            region_code = game.id[3]
            region_map = {
                'E': 'üá∫üá∏ USA',
                'P': 'üá™üá∫ Europe', 
                'J': 'üáØüáµ Japan',
                'K': 'üá∞üá∑ Korea'
            }
            region = region_map.get(region_code, 'üåê Unknown')
            info_text += f"üåç –†–µ–≥–∏–æ–Ω: {region}\n"
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        info_text += f"\n‚úÖ –ò–≥—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ñ–ª–µ—à–∫–µ"
        
        self._info.setText(info_text)
        
        # –û–±–ª–æ–∂–∫–∞/–∏–∫–æ–Ω–∫–∞
        self._cover.setText("üíæ\nüéÆ")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self._btn_remove.setEnabled(True)
        self._btn_open_folder.setEnabled(True)

    def _remove_game(self):
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É —Å —Ñ–ª–µ—à–∫–∏"""
        if self.current_game:
            self.manager._remove_flash_game(self.current_game)

    def _open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π"""
        if self.current_game and hasattr(self.current_game, 'dir'):
            import subprocess
            import os
            try:
                if os.name == 'nt':  # Windows
                    os.startfile(str(self.current_game.dir))
                else:  # Linux/Mac
                    subprocess.run(['xdg-open', str(self.current_game.dir)])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

###############################################################################
# ÔøΩüñ•Ô∏è Main window                                                             #
###############################################################################

class WiiUnifiedManager(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑ –ø–æ—Ç–æ–∫–∞
    search_completed = Signal(list)

    def __init__(self) -> None:
        super().__init__()
        self.setWindowTitle("üéÆ Wii Unified Manager 2.4")
        self.resize(1280, 860)
        self.setWindowIcon(QIcon())
        self.setStyleSheet(build_style())

        # Services
        self.parser = WiiGameParser()
        self.queue = DownloadQueue(self)

        # UI layout
        central = QWidget()
        self.setCentralWidget(central)
        root = QVBoxLayout(central)

        header = QLabel("üéÆ Wii Unified Manager")
        header.setProperty("headerTitle", True)
        header.setAlignment(Qt.AlignCenter)
        root.addWidget(header)

        nav = QHBoxLayout()
        self.btn_search = AnimatedNavButton("üîç –ü–æ–∏—Å–∫")
        self.btn_manager = AnimatedNavButton("üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä")
        self.btn_search.setChecked(True)
        nav.addStretch()
        nav.addWidget(self.btn_search)
        nav.addWidget(self.btn_manager)
        nav.addStretch()
        root.addLayout(nav)

        self.stack = QStackedWidget()
        self.page_search = self._build_search_page()
        self.page_manager = self._build_manager_page()
        self.stack.addWidget(self.page_search) # Add pages to stack
        self.stack.addWidget(self.page_manager)
        root.addWidget(self.stack, 1) # Add stack to root layout with stretch factor

        self.status = QStatusBar()
        self.setStatusBar(self.status)
        self.status.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üîã")

        self._games: List[WiiGame] = []
        self._flash_games = []  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä —Å —Ñ–ª–µ—à–∫–∏
        self.current_drive = None  # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–ª–µ—à–∫–∞
        self._connect_signals()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ–∏—Å–∫–∞
        self.search_completed.connect(self._populate_list)

    # ------------------------------------------------------------------
    def _build_search_page(self) -> QWidget:
        page = QWidget()
        vbox = QVBoxLayout(page)

        hbox = QHBoxLayout()
        self.edit_query = QLineEdit()
        self.edit_query.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã‚Ä¶")
        self.btn_go = QPushButton("üîç –ù–∞–π—Ç–∏")
        hbox.addWidget(self.edit_query)
        hbox.addWidget(self.btn_go)
        vbox.addLayout(hbox)

        splitter = QSplitter(Qt.Horizontal)
        self.list_results = QListWidget()
        self.card = GameCard(self.queue) # GameCard will now fill available space
        splitter.addWidget(self.list_results)
        splitter.addWidget(self.card)
        splitter.setSizes([350, 650]) # Adjusted sizes: left (search) narrower, right (card) wider
        splitter.setStretchFactor(0, 1) # Search results list (left pane)
        splitter.setStretchFactor(1, 2) # Game card (right pane) - give it more weight
        vbox.addWidget(splitter, 1) # Add splitter with stretch factor to fill vertical space
        return page

    # ------------------------------------------------------------------
    def _build_manager_page(self) -> QWidget:
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)

        # Drive selection header
        drive_layout = QHBoxLayout()
        drive_label = QLabel("üíæ –§–ª–µ—à–∫–∞:")
        drive_label.setStyleSheet("font-size:16pt;font-weight:bold;color:#5C6BC0;")
        self.drive_combo = QComboBox()
        self.drive_combo.setMinimumWidth(200)
        self.drive_combo.setStyleSheet(
            f"QComboBox {{ font-size:14pt; padding:8px; border:2px solid {WII_GRAY}; "
            f"border-radius:12px; background:{WII_WHITE}; }}"
        )
        
        self.btn_refresh_drives = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.drive_info_label = QLabel("")
        self.drive_info_label.setStyleSheet("font-size:12pt;color:#666;")
        
        drive_layout.addWidget(drive_label)
        drive_layout.addWidget(self.drive_combo, 1)
        drive_layout.addWidget(self.btn_refresh_drives)
        drive_layout.addStretch()
        drive_layout.addWidget(self.drive_info_label)
        layout.addLayout(drive_layout)

        # Downloads status section
        downloads_layout = QHBoxLayout()
        downloads_label = QLabel("üì• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
        downloads_label.setStyleSheet("font-size:14pt;font-weight:bold;color:#5C6BC0;")
        self.downloads_info = QLabel("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")
        self.downloads_info.setStyleSheet("font-size:12pt;color:#666;")
        
        downloads_layout.addWidget(downloads_label)
        downloads_layout.addStretch()
        downloads_layout.addWidget(self.downloads_info)
        layout.addLayout(downloads_layout)

        # Main content area with splitter
        splitter = QSplitter(Qt.Horizontal)
        
        # Left side - games list
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Search for downloaded games
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç –ü–æ–∏—Å–∫:")
        self.flash_search = QLineEdit()
        self.flash_search.setPlaceholderText("–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –∏–≥—Ä...")
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.flash_search)
        left_layout.addLayout(search_layout)
        
        # Games list
        self.list_flash_games = QListWidget()
        self.list_flash_games.setMinimumWidth(300)
        left_layout.addWidget(self.list_flash_games, 1)
        
        # Action buttons
        buttons_layout = QVBoxLayout()
        self.btn_add_external = QPushButton("üìÇ –î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã")
        self.btn_copy_downloaded = QPushButton("üíæ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω–æ–µ")
        self.btn_remove_from_flash = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å —Ñ–ª–µ—à–∫–∏")
        self.btn_verify_games = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä—ã")
        
        buttons_layout.addWidget(self.btn_add_external)
        buttons_layout.addWidget(self.btn_copy_downloaded)
        buttons_layout.addWidget(self.btn_remove_from_flash)
        buttons_layout.addWidget(self.btn_verify_games)
        buttons_layout.addStretch()
        
        left_layout.addLayout(buttons_layout)
        splitter.addWidget(left_widget)

        # Right side - game card
        self.flash_card = FlashGameCard(self)
        splitter.addWidget(self.flash_card)
        
        splitter.setSizes([400, 600])
        layout.addWidget(splitter, 1)

        # Progress bar for operations
        self.flash_progress = QProgressBar()
        self.flash_progress.setVisible(False)
        self.flash_progress.setStyleSheet(
            f"QProgressBar {{ border:2px solid {WII_GRAY}; border-radius:12px; "
            f"text-align:center; font-size:14pt; min-height:32px; }}"
            f"QProgressBar::chunk {{ background-color:{WII_GREEN}; border-radius:10px; }}"
        )
        layout.addWidget(self.flash_progress)

        return page

    # ------------------------------------------------------------------
    def _connect_signals(self):
        self.btn_search.clicked.connect(lambda: self._switch_page(self.page_search, self.btn_search))
        self.btn_manager.clicked.connect(lambda: self._switch_page(self.page_manager, self.btn_manager))

        # Manager page signals
        self.btn_refresh_drives.clicked.connect(self._refresh_drives)
        self.drive_combo.currentIndexChanged.connect(self._on_drive_selected)
        self.btn_add_external.clicked.connect(self._action_add_external_to_usb)
        self.btn_copy_downloaded.clicked.connect(self._action_copy_downloaded_to_usb)
        self.btn_remove_from_flash.clicked.connect(self._action_remove_from_usb)
        self.btn_verify_games.clicked.connect(self._action_verify_games)
        
        # Flash games list selection
        self.list_flash_games.currentRowChanged.connect(self._flash_game_selected)
        
        # Search in flash games
        self.flash_search.textChanged.connect(self._filter_flash_games)

        # Search page signals
        self.btn_go.clicked.connect(self._do_search)
        self.edit_query.returnPressed.connect(self._do_search)
        self.list_results.currentRowChanged.connect(self._row_changed)

        # Queue ‚Üí status
        # Ensure self.queue is initialized before connecting its signals. It is in __init__.
        if hasattr(self, 'queue') and self.queue: # Check if queue exists
            self.queue.queue_changed.connect(lambda n: self.status.showMessage(f"–û—á–µ—Ä–µ–¥—å: {n} –∏–≥—Ä"))
            self.queue.download_started.connect(lambda g: self.status.showMessage(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {g.title}‚Ä¶"))
            self.queue.download_finished.connect(lambda g: self.status.showMessage(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {g.title}"))
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–∞—Ö
            self.queue.queue_changed.connect(self._update_downloads_info)
            self.queue.download_started.connect(self._update_downloads_info)
            self.queue.download_finished.connect(self._update_downloads_info)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if hasattr(self.queue, 'speed_updated'):
                self.queue.speed_updated.connect(self._on_speed_update)
        else:
            print("Warning: DownloadQueue not initialized when connecting signals.")

    def _on_speed_update(self, game: WiiGame, speed: float, eta: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        self.status.showMessage(f"‚¨áÔ∏è {game.title}: {speed:.1f} –ú–ë/—Å, –æ—Å—Ç–∞–ª–æ—Å—å {eta}")

    def _update_downloads_info(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–∞—Ö"""
        try:
            queue_size = self.queue._queue.qsize()
            active_downloads = len(self.queue._downloads_in_progress)
            
            if active_downloads == 0 and queue_size == 0:
                self.downloads_info.setText("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")
                self.downloads_info.setStyleSheet("font-size:12pt;color:#666;")
            else:
                info_text = ""
                if active_downloads > 0:
                    info_text += f"üîÑ –°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è: {active_downloads}"
                if queue_size > 0:
                    if info_text:
                        info_text += " | "
                    info_text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {queue_size}"
                
                self.downloads_info.setText(info_text)
                self.downloads_info.setStyleSheet("font-size:12pt;color:#66BB6A;font-weight:bold;")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–∞—Ö: {e}")

    # ------------------------------------------------------------------
    def _flash_game_selected(self, row: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã —Å —Ñ–ª–µ—à–∫–∏"""
        if 0 <= row < len(self._flash_games):
            game = self._flash_games[row]
            self.flash_card.update_game(game)
        else:
            self.flash_card.update_game(None)

    def _filter_flash_games(self, text: str):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä —Å —Ñ–ª–µ—à–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∏—Å–∫–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∏—Å–∫—É
        search_text = text.lower()
        for i in range(self.list_flash_games.count()):
            item = self.list_flash_games.item(i)
            if item:
                game_text = item.text().lower()
                item.setHidden(search_text not in game_text)


    # ------------------------------------------------------------------
    def _switch_page(self, page: QWidget, btn: QPushButton):
        self.btn_search.setChecked(False)
        self.btn_manager.setChecked(False)
        # Also visually reset other buttons if they were animated/scaled
        if btn != self.btn_search:
            self.btn_search._scale(1.0)
        if btn != self.btn_manager:
            self.btn_manager._scale(1.0)

        btn.setChecked(True)
        btn._scale(1.0) # Ensure checked button is at normal scale
        self.stack.setCurrentWidget(page)
        if page == self.page_manager:
            self._refresh_drives() # Refresh drives when switching to manager page

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–ª–µ—à–∫–æ–π
    def _refresh_drives(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤"""
        self.drive_combo.clear()
        self.current_drive = None
        self.drive_info_label.setText("")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced drive
            from wii_download_manager.models.enhanced_drive import EnhancedDrive
            drives = EnhancedDrive.get_drives()
            
            if not drives:
                self.drive_combo.addItem("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤")
                self.status.showMessage("–°—ä–µ–º–Ω—ã–µ –¥–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            for drive in drives:
                display_text = f"{drive.name} ({drive.available_space}/{drive.total_space} –ì–ë)"
                self.drive_combo.addItem(display_text, drive)
            
            self.status.showMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(drives)} —Å—ä–µ–º–Ω—ã—Ö –¥–∏—Å–∫–æ–≤")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–∏—Å–∫
            if drives:
                self.drive_combo.setCurrentIndex(0)
                self._on_drive_selected()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏—Å–∫–æ–≤: {e}")
            self.drive_combo.addItem("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å–∫–æ–≤")
            self.status.showMessage(f"–û—à–∏–±–∫–∞: {e}")

    def _on_drive_selected(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å–∫–∞"""
        current_index = self.drive_combo.currentIndex()
        self.current_drive = self.drive_combo.itemData(current_index)
        
        if self.current_drive:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
            space_info = self.current_drive.get_space_info()
            info_text = f"üíæ {space_info['free_gb']:.1f} –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ {space_info['total_gb']:.1f} –ì–ë"
            self.drive_info_label.setText(info_text)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
            self._load_flash_games()
            self.status.showMessage(f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–ª–µ—à–∫–∞: {self.current_drive.name}")
        else:
            self.drive_info_label.setText("")
            self._flash_games.clear()
            self.list_flash_games.clear()
            self.flash_card.update_game(None)

    def _load_flash_games(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—ã —Å —Ñ–ª–µ—à–∫–∏"""
        if not self.current_drive:
            return
            
        try:
            self._flash_games = self.current_drive.get_games()
            self._update_flash_games_list()
            
            games_info = self.current_drive.get_games_info()
            self.status.showMessage(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {games_info['total_games']} –∏–≥—Ä "
                f"({games_info['total_size_gb']:.1f} –ì–ë)"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä —Å —Ñ–ª–µ—à–∫–∏: {e}")
            self.status.showMessage(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: {e}")
            self._flash_games.clear()
            self.list_flash_games.clear()

    def _update_flash_games_list(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —Å —Ñ–ª–µ—à–∫–∏"""
        self.list_flash_games.clear()
        
        for game in self._flash_games:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
            region_emoji = "üåê"
            if len(game.id) >= 4:
                region_code = game.id[3]
                region_emojis = {
                    'E': 'üá∫üá∏',
                    'P': 'üá™üá∫', 
                    'J': 'üáØüáµ',
                    'K': 'üá∞üá∑'
                }
                region_emoji = region_emojis.get(region_code, 'üåê')
            
            display_text = f"{region_emoji} {game.display_title}"
            size_gb = game.size / (1024**3)
            display_text += f" ({size_gb:.1f} –ì–ë)"
            
            item = QListWidgetItem(display_text)
            self.list_flash_games.addItem(item)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        self.flash_card.update_game(None)

    def _action_add_external_to_usb(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ —Ñ–ª–µ—à–∫—É"""
        if not self.current_drive:
            self.status.showMessage("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–ª–µ—à–∫—É")
            return
            
        from PySide6.QtWidgets import QFileDialog
        files, _ = QFileDialog.getOpenFileNames(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–≥—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ñ–ª–µ—à–∫—É", 
            "", 
            "–§–∞–π–ª—ã –∏–≥—Ä (*.iso *.wbfs *.rvz);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if files:
            self._copy_files_to_flash(files)

    def _action_copy_downloaded_to_usb(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–∞ —Ñ–ª–µ—à–∫—É"""
        if not self.current_drive:
            self.status.showMessage("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–ª–µ—à–∫—É")
            return
            
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.status.showMessage("–§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–≥—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    def _action_remove_from_usb(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É —Å —Ñ–ª–µ—à–∫–∏"""
        current_row = self.list_flash_games.currentRow()
        if current_row >= 0 and current_row < len(self._flash_games):
            game = self._flash_games[current_row]
            self._remove_flash_game(game)
        else:
            self.status.showMessage("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def _action_verify_games(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä –Ω–∞ —Ñ–ª–µ—à–∫–µ"""
        if not self.current_drive:
            self.status.showMessage("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–ª–µ—à–∫—É")
            return
            
        try:
            results = self.current_drive.verify_games()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            valid_count = sum(1 for r in results if r['valid'])
            total_count = len(results)
            
            if valid_count == total_count:
                self.status.showMessage(f"‚úÖ –í—Å–µ {total_count} –∏–≥—Ä –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
            else:
                error_count = total_count - valid_count
                self.status.showMessage(
                    f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {valid_count} OK, {error_count} —Å –æ—à–∏–±–∫–∞–º–∏"
                )
                
        except Exception as e:
            self.status.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    def _copy_files_to_flash(self, file_paths):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Ñ–ª–µ—à–∫—É"""
        if not self.current_drive:
            return
            
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.flash_progress.setVisible(True)
            self.flash_progress.setValue(0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
            total_size = 0
            valid_files = []
            
            for file_path in file_paths:
                from pathlib import Path
                path = Path(file_path)
                if path.exists():
                    total_size += path.stat().st_size
                    valid_files.append(path)
            
            space_info = self.current_drive.get_space_info()
            if total_size > space_info['free_bytes']:
                from PySide6.QtWidgets import QMessageBox
                QMessageBox.warning(
                    self, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞",
                    f"–ù—É–∂–Ω–æ: {total_size / (1024**3):.1f} –ì–ë\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {space_info['free_gb']:.1f} –ì–ë"
                )
                self.flash_progress.setVisible(False)
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self._start_copy_operation(valid_files)
            
        except Exception as e:
            self.status.showMessage(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.flash_progress.setVisible(False)

    def _start_copy_operation(self, files):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        def progress_callback(progress):
            """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
            if progress.total_files > 0:
                percent = int((progress.files_completed / progress.total_files) * 100)
                QTimer.singleShot(0, lambda: self.flash_progress.setValue(percent))
                
                status_text = f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {progress.current_file} ({progress.files_completed}/{progress.total_files})"
                QTimer.singleShot(0, lambda: self.status.showMessage(status_text))
        
        def copy_worker():
            """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
            try:
                success = self.current_drive.add_games_with_progress(files, progress_callback)
                QTimer.singleShot(0, lambda: self._on_copy_finished(success))
            except Exception as e:
                QTimer.singleShot(0, lambda: self._on_copy_error(str(e)))
        
        import threading
        thread = threading.Thread(target=copy_worker, daemon=True)
        thread.start()

    def _on_copy_finished(self, success):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.flash_progress.setVisible(False)
        
        if success:
            self.status.showMessage("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            self._load_flash_games()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        else:
            self.status.showMessage("‚ö†Ô∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")

    def _on_copy_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.flash_progress.setVisible(False)
        self.status.showMessage(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {error_message}")

    def _remove_flash_game(self, game):
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É —Å —Ñ–ª–µ—à–∫–∏"""
        from PySide6.QtWidgets import QMessageBox
        
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É '{game.display_title}' —Å —Ñ–ª–µ—à–∫–∏?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
                game.delete()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self._load_flash_games()
                self.flash_card.update_game(None)
                
                self.status.showMessage(f"‚úÖ –ò–≥—Ä–∞ '{game.display_title}' —É–¥–∞–ª–µ–Ω–∞ —Å —Ñ–ª–µ—à–∫–∏")
                
            except Exception as e:
                QMessageBox.critical(
                    self, "–û—à–∏–±–∫–∞", 
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É: {e}"
                )
                self.status.showMessage(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


    # ------------------------------------------------------------------
    def _do_search(self):
        query = self.edit_query.text().strip()
        if not query:
            return
        self.status.showMessage(f"–ü–æ–∏—Å–∫ ¬´{query}¬ª‚Ä¶")
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {query}")

        def worker():
            try:
                print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è: {query}")
                games = self.parser.search_games_online(query)
                print(f"–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(games)}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
                self.search_completed.emit(games)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"
                QTimer.singleShot(0, lambda: self.status.showMessage(error_msg))

        import threading

        threading.Thread(target=worker, daemon=True).start()

    # ------------------------------------------------------------------
    def _populate_list(self, games: List[WiiGame]):
        print(f"_populate_list –≤—ã–∑–≤–∞–Ω–∞ —Å {len(games)} –∏–≥—Ä–∞–º–∏")
        self._games = games
        self.list_results.clear()
        for g in games:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–≥—Ä—ã
            region_emoji = {
                'USA': 'üá∫üá∏',
                'Europe': 'üá™üá∫', 
                'Japan': 'üáØüáµ',
                'PAL': 'üåç',
                'NTSC': 'üì∫'
            }.get(g.region, 'üåê')
            
            display_text = f"{region_emoji} {g.title}"
            if g.region and g.region not in g.title:
                display_text += f" ({g.region})"
                
            item = QListWidgetItem(display_text)
            self.list_results.addItem(item)
        if games:
            self.list_results.setCurrentRow(0)
        self.status.showMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(games)} –∏–≥—Ä")
        print(f"–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –≤ —Å–ø–∏—Å–∫–µ {self.list_results.count()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    # ------------------------------------------------------------------
    def _row_changed(self, row: int):
        if 0 <= row < len(self._games):
            self.card.update_game(self._games[row])

###############################################################################
# üöÄ main                                                                    #
###############################################################################

def main():
    app = QApplication(sys.argv)
    win = WiiUnifiedManager()
    win.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
